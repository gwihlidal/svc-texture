// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_SVCTEXTURE_SERVICE_TEXTURE_SCHEMA_H_
#define FLATBUFFERS_GENERATED_SVCTEXTURE_SERVICE_TEXTURE_SCHEMA_H_

#include "flatbuffers/flatbuffers.h"

namespace service {
namespace texture {
namespace schema {

struct Artifact;

struct Texture;

struct Manifest;

struct Artifact FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_NAME = 4,
    VT_IDENTITY = 6,
    VT_DATA = 8
  };
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  const flatbuffers::String *identity() const {
    return GetPointer<const flatbuffers::String *>(VT_IDENTITY);
  }
  const flatbuffers::Vector<uint8_t> *data() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_DATA);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffset(verifier, VT_IDENTITY) &&
           verifier.VerifyString(identity()) &&
           VerifyOffset(verifier, VT_DATA) &&
           verifier.VerifyVector(data()) &&
           verifier.EndTable();
  }
};

struct ArtifactBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(Artifact::VT_NAME, name);
  }
  void add_identity(flatbuffers::Offset<flatbuffers::String> identity) {
    fbb_.AddOffset(Artifact::VT_IDENTITY, identity);
  }
  void add_data(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> data) {
    fbb_.AddOffset(Artifact::VT_DATA, data);
  }
  explicit ArtifactBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ArtifactBuilder &operator=(const ArtifactBuilder &);
  flatbuffers::Offset<Artifact> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Artifact>(end);
    return o;
  }
};

inline flatbuffers::Offset<Artifact> CreateArtifact(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    flatbuffers::Offset<flatbuffers::String> identity = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> data = 0) {
  ArtifactBuilder builder_(_fbb);
  builder_.add_data(data);
  builder_.add_identity(identity);
  builder_.add_name(name);
  return builder_.Finish();
}

inline flatbuffers::Offset<Artifact> CreateArtifactDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    const char *identity = nullptr,
    const std::vector<uint8_t> *data = nullptr) {
  return service::texture::schema::CreateArtifact(
      _fbb,
      name ? _fbb.CreateString(name) : 0,
      identity ? _fbb.CreateString(identity) : 0,
      data ? _fbb.CreateVector<uint8_t>(*data) : 0);
}

struct Texture FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_NAME = 4,
    VT_ENTRY = 6,
    VT_ARTIFACT = 8
  };
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  const flatbuffers::String *entry() const {
    return GetPointer<const flatbuffers::String *>(VT_ENTRY);
  }
  const Artifact *artifact() const {
    return GetPointer<const Artifact *>(VT_ARTIFACT);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffset(verifier, VT_ENTRY) &&
           verifier.VerifyString(entry()) &&
           VerifyOffset(verifier, VT_ARTIFACT) &&
           verifier.VerifyTable(artifact()) &&
           verifier.EndTable();
  }
};

struct TextureBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(Texture::VT_NAME, name);
  }
  void add_entry(flatbuffers::Offset<flatbuffers::String> entry) {
    fbb_.AddOffset(Texture::VT_ENTRY, entry);
  }
  void add_artifact(flatbuffers::Offset<Artifact> artifact) {
    fbb_.AddOffset(Texture::VT_ARTIFACT, artifact);
  }
  explicit TextureBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  TextureBuilder &operator=(const TextureBuilder &);
  flatbuffers::Offset<Texture> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Texture>(end);
    return o;
  }
};

inline flatbuffers::Offset<Texture> CreateTexture(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    flatbuffers::Offset<flatbuffers::String> entry = 0,
    flatbuffers::Offset<Artifact> artifact = 0) {
  TextureBuilder builder_(_fbb);
  builder_.add_artifact(artifact);
  builder_.add_entry(entry);
  builder_.add_name(name);
  return builder_.Finish();
}

inline flatbuffers::Offset<Texture> CreateTextureDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    const char *entry = nullptr,
    flatbuffers::Offset<Artifact> artifact = 0) {
  return service::texture::schema::CreateTexture(
      _fbb,
      name ? _fbb.CreateString(name) : 0,
      entry ? _fbb.CreateString(entry) : 0,
      artifact);
}

struct Manifest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_TEXTURES = 4
  };
  const flatbuffers::Vector<flatbuffers::Offset<Texture>> *textures() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<Texture>> *>(VT_TEXTURES);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_TEXTURES) &&
           verifier.VerifyVector(textures()) &&
           verifier.VerifyVectorOfTables(textures()) &&
           verifier.EndTable();
  }
};

struct ManifestBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_textures(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Texture>>> textures) {
    fbb_.AddOffset(Manifest::VT_TEXTURES, textures);
  }
  explicit ManifestBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ManifestBuilder &operator=(const ManifestBuilder &);
  flatbuffers::Offset<Manifest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Manifest>(end);
    return o;
  }
};

inline flatbuffers::Offset<Manifest> CreateManifest(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Texture>>> textures = 0) {
  ManifestBuilder builder_(_fbb);
  builder_.add_textures(textures);
  return builder_.Finish();
}

inline flatbuffers::Offset<Manifest> CreateManifestDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<Texture>> *textures = nullptr) {
  return service::texture::schema::CreateManifest(
      _fbb,
      textures ? _fbb.CreateVector<flatbuffers::Offset<Texture>>(*textures) : 0);
}

inline const service::texture::schema::Manifest *GetManifest(const void *buf) {
  return flatbuffers::GetRoot<service::texture::schema::Manifest>(buf);
}

inline const service::texture::schema::Manifest *GetSizePrefixedManifest(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<service::texture::schema::Manifest>(buf);
}

inline bool VerifyManifestBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<service::texture::schema::Manifest>(nullptr);
}

inline bool VerifySizePrefixedManifestBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<service::texture::schema::Manifest>(nullptr);
}

inline void FinishManifestBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<service::texture::schema::Manifest> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedManifestBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<service::texture::schema::Manifest> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace schema
}  // namespace texture
}  // namespace service

#endif  // FLATBUFFERS_GENERATED_SVCTEXTURE_SERVICE_TEXTURE_SCHEMA_H_
